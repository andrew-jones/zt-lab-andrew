---
- name: Create inventory
  hosts: localhost
  gather_facts: false
  tasks:
  - name: Add bastion host
    ansible.builtin.add_host:
      name: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
      ansible_ssh_host: "{{ lookup('ansible.builtin.env', 'BASTION_HOST') }}"
      ansible_ssh_port: "{{ lookup('ansible.builtin.env', 'BASTION_PORT') }}"
      ansible_ssh_user: "{{ lookup('ansible.builtin.env', 'BASTION_USER') }}"
      ansible_ssh_pass: "{{ lookup('ansible.builtin.env', 'BASTION_PASSWORD') }}"

- name: Demo Playbook for the ansible-runner API
  hosts: all:!localhost
  gather_facts: false
  become: false

  tasks:
  - name: Simple debug task
    ansible.builtin.debug:
      msg: "Hello Runner"

  - name: Set config_host variable with ansible_host value
    set_fact:
      config_host: "{{ ansible_host }}"

  - name: Create a directory if it does not exist
    ansible.builtin.file:
      path: "/tmp/runtime-scripts/{{ module_dir }}"
      state: directory
      mode: '0755'

  - name: Check if /module_dir/module_stage-host.sh exists
    ansible.builtin.stat:
      path: "./{{ module_dir }}/{{ module_stage }}-{{ config_host }}.sh"
    delegate_to: localhost
    register: r_script_test

  - name: Install validation helper (function)
    when: r_script_test.stat.exists
    ansible.builtin.copy:
      dest: "/tmp/runtime-scripts/{{ module_dir }}/env.validation.sh"
      mode: '0644'
      content: |
        fail_validation() {
          echo "= FAIL VALIDATION BEGIN"
          if [ "$1" = "-" ] || { [ -z "$*" ] && [ ! -t 0 ]; }; then
            while IFS= read -r LINE; do
              echo "$LINE"
            done
          elif [ -n "$*" ]; then
            printf '%s\n' "$@"
          fi
          echo "= FAIL VALIDATION END"
          return 1
        }

  - name: Copy script file
    when: r_script_test.stat.exists
    copy:
      src: "./{{ module_dir }}/{{ module_stage }}-{{ ansible_host }}.sh"
      dest: "/tmp/runtime-scripts/{{ module_dir }}/{{ module_stage }}-{{ ansible_host }}.sh"
    register: r_result

  - name: Execute module_stage-host.sh if it exists
    when: r_script_test.stat.exists
    shell: |
      set -e
      [ -f /tmp/runtime-scripts/{{ module_dir }}/env.validation.sh ] && . /tmp/runtime-scripts/{{ module_dir }}/env.validation.sh
      set -x
      . /tmp/runtime-scripts/{{ module_dir }}/{{ module_stage }}-{{ ansible_host }}.sh
    become: true
    register: r_result
    failed_when: false

  - name: Write combined stdout and stderr to log file
    ansible.builtin.copy:
      dest: "/tmp/runtime-scripts/{{ module_dir }}/{{ module_stage }}-{{ ansible_host }}.log"
      content: "{{ r_result.stdout | default('') }}{% if (r_result.stdout | default('')) and (r_result.stderr | default('')) %}\n{% endif %}{{ r_result.stderr | default('') }}"
      mode: '0644'
    become: true
    when: r_script_test.stat.exists

  - name: Get validation failure
    when: r_script_test.stat.exists and (r_result.stdout is defined) and ("= FAIL VALIDATION BEGIN" in r_result.stdout)
    vars:
      fail_validation_text: >-
        {{ (r_result.stdout | default(''))
          | regex_replace('(?ms).*^= FAIL VALIDATION BEGIN\\n', '')
          | regex_replace('(?ms)\\n?= FAIL VALIDATION END.*', '')
        }}
    ansible.builtin.debug:
      var: fail_validation_text

  - name: Write validation failure to file
    ansible.builtin.copy:
      content: "{{ (r_result.stdout | default(''))
        | regex_replace('(?ms).*^= FAIL VALIDATION BEGIN\\n', '')
        | regex_replace('(?ms)\\n?= FAIL VALIDATION END.*', '') }}"
      dest: "{{ job_info_dir }}/validation_failure.out"
    delegate_to: localhost
    when: r_script_test.stat.exists and job_info_dir is defined and (r_result.stdout is defined) and ("= FAIL VALIDATION BEGIN" in r_result.stdout)

  - name: Output script result
    ansible.builtin.debug:
      msg: "{{ r_result.stdout | default('') }}"
    when: r_script_test.stat.exists

  - name: Write script result to file
    ansible.builtin.copy:
      content: "{{ r_result.stdout | default('') }}"
      dest: "{{ job_info_dir }}/script.out"
    delegate_to: localhost
    when: r_script_test.stat.exists and job_info_dir is defined

  - name: Output script result
    ansible.builtin.debug:
      var: r_result
    when: r_script_test.stat.exists and job_info_dir is defined

  - name: Fail if stage was failed
    ansible.builtin.fail:
      msg: "Stage failed"
    when: r_script_test.stat.exists and r_result.rc != 0